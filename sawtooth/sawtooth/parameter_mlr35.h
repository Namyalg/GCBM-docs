#ifndef sawtooth_mlr35_param_h
#define sawtooth_mlr35_param_h
#include "equationset.h"
#include <map>
namespace Sawtooth {
	namespace Parameter {
		struct ParameterMortalityMLR35 {
			double M_1_int;
			double M_1_h1;
			double M_1_h2;
			double M_1_ci;
			double M_1_tmin1;
			double M_1_tmin2;
			double M_1_ndep1;
			double M_1_ndep2;
			double M_1_ws1;
			double M_1_ws2;
			double M_1_etp1;
			double M_1_etp2;
			double M_1_nw_w1;
			double M_1_nw_x_w2;
			double M_1_h1_x_w1;
			double M_1_h1_x_w2;
			double M_1_h2_x_w1;
			double M_1_h2_x_w2;
			double M_1_ci_x_w1;
			double M_1_ci_x_w2;
			double M_1_n1_x_w1;
			double M_1_n1_x_w2;
			double M_1_n2_x_w1;
			double M_1_n2_x_w2;
			double M_1_ne_e1;
			double M_1_ne_x_e2;
			double M_1_h1_x_e1;
			double M_1_h1_x_e2;
			double M_1_h2_x_e1;
			double M_1_h2_x_e2;
			double M_1_ci_x_e1;
			double M_1_ci_x_e2;
			double M_1_n1_x_e1;
			double M_1_n1_x_e2;
			double M_1_n2_x_e1;
			double M_1_n2_x_e2;
			double M_2_int;
			double M_2_h1;
			double M_2_h2;
			double M_2_ci;
			double M_2_tmin1;
			double M_2_tmin2;
			double M_2_ndep1;
			double M_2_ndep2;
			double M_2_ws1;
			double M_2_ws2;
			double M_2_etp1;
			double M_2_etp2;
			double M_2_nw_w1;
			double M_2_nw_x_w2;
			double M_2_h1_x_w1;
			double M_2_h1_x_w2;
			double M_2_h2_x_w1;
			double M_2_h2_x_w2;
			double M_2_ci_x_w1;
			double M_2_ci_x_w2;
			double M_2_n1_x_w1;
			double M_2_n1_x_w2;
			double M_2_n2_x_w1;
			double M_2_n2_x_w2;
			double M_2_ne_e1;
			double M_2_ne_x_e2;
			double M_2_h1_x_e1;
			double M_2_h1_x_e2;
			double M_2_h2_x_e1;
			double M_2_h2_x_e2;
			double M_2_ci_x_e1;
			double M_2_ci_x_e2;
			double M_2_n1_x_e1;
			double M_2_n1_x_e2;
			double M_2_n2_x_e1;
			double M_2_n2_x_e2;
			double M_3_int;
			double M_3_h1;
			double M_3_h2;
			double M_3_ci;
			double M_3_tmin1;
			double M_3_tmin2;
			double M_3_ndep1;
			double M_3_ndep2;
			double M_3_ws1;
			double M_3_ws2;
			double M_3_etp1;
			double M_3_etp2;
			double M_3_nw_w1;
			double M_3_nw_x_w2;
			double M_3_h1_x_w1;
			double M_3_h1_x_w2;
			double M_3_h2_x_w1;
			double M_3_h2_x_w2;
			double M_3_ci_x_w1;
			double M_3_ci_x_w2;
			double M_3_n1_x_w1;
			double M_3_n1_x_w2;
			double M_3_n2_x_w1;
			double M_3_n2_x_w2;
			double M_3_ne_e1;
			double M_3_ne_x_e2;
			double M_3_h1_x_e1;
			double M_3_h1_x_e2;
			double M_3_h2_x_e1;
			double M_3_h2_x_e2;
			double M_3_ci_x_e1;
			double M_3_ci_x_e2;
			double M_3_n1_x_e1;
			double M_3_n1_x_e2;
			double M_3_n2_x_e1;
			double M_3_n2_x_e2;
			double M_4_int;
			double M_4_h1;
			double M_4_h2;
			double M_4_ci;
			double M_4_tmin1;
			double M_4_tmin2;
			double M_4_ndep1;
			double M_4_ndep2;
			double M_4_ws1;
			double M_4_ws2;
			double M_4_etp1;
			double M_4_etp2;
			double M_4_nw_w1;
			double M_4_nw_x_w2;
			double M_4_h1_x_w1;
			double M_4_h1_x_w2;
			double M_4_h2_x_w1;
			double M_4_h2_x_w2;
			double M_4_ci_x_w1;
			double M_4_ci_x_w2;
			double M_4_n1_x_w1;
			double M_4_n1_x_w2;
			double M_4_n2_x_w1;
			double M_4_n2_x_w2;
			double M_4_ne_e1;
			double M_4_ne_x_e2;
			double M_4_h1_x_e1;
			double M_4_h1_x_e2;
			double M_4_h2_x_e1;
			double M_4_h2_x_e2;
			double M_4_ci_x_e1;
			double M_4_ci_x_e2;
			double M_4_n1_x_e1;
			double M_4_n1_x_e2;
			double M_4_n2_x_e1;
			double M_4_n2_x_e2;
			double M_5_int;
			double M_5_h1;
			double M_5_h2;
			double M_5_ci;
			double M_5_tmin1;
			double M_5_tmin2;
			double M_5_ndep1;
			double M_5_ndep2;
			double M_5_ws1;
			double M_5_ws2;
			double M_5_etp1;
			double M_5_etp2;
			double M_5_nw_w1;
			double M_5_nw_x_w2;
			double M_5_h1_x_w1;
			double M_5_h1_x_w2;
			double M_5_h2_x_w1;
			double M_5_h2_x_w2;
			double M_5_ci_x_w1;
			double M_5_ci_x_w2;
			double M_5_n1_x_w1;
			double M_5_n1_x_w2;
			double M_5_n2_x_w1;
			double M_5_n2_x_w2;
			double M_5_ne_e1;
			double M_5_ne_x_e2;
			double M_5_h1_x_e1;
			double M_5_h1_x_e2;
			double M_5_h2_x_e1;
			double M_5_h2_x_e2;
			double M_5_ci_x_e1;
			double M_5_ci_x_e2;
			double M_5_n1_x_e1;
			double M_5_n1_x_e2;
			double M_5_n2_x_e1;
			double M_5_n2_x_e2;
			double M_h1_mu;
			double M_h2_mu;
			double M_ci_mu;
			double M_tmin1_mu;
			double M_tmin2_mu;
			double M_n1_mu;
			double M_n2_mu;
			double M_ws1_mu;
			double M_ws2_mu;
			double M_etp1_mu;
			double M_etp2_mu;
			double M_nw_mu;
			double M_ne_mu;
			double M_h1_sig;
			double M_h2_sig;
			double M_ci_sig;
			double M_tmin1_sig;
			double M_tmin2_sig;
			double M_n1_sig;
			double M_n2_sig;
			double M_ws1_sig;
			double M_ws2_sig;
			double M_etp1_sig;
			double M_etp2_sig;
			double M_nw_sig;
			double M_ne_sig;

			ParameterMortalityMLR35() {}
			ParameterMortalityMLR35(const EquationSet& values) {
				M_1_int = values.at("M_1_int");
				M_1_h1 = values.at("M_1_h1");
				M_1_h2 = values.at("M_1_h2");
				M_1_ci = values.at("M_1_ci");
				M_1_tmin1 = values.at("M_1_tmin1");
				M_1_tmin2 = values.at("M_1_tmin2");
				M_1_ndep1 = values.at("M_1_ndep1");
				M_1_ndep2 = values.at("M_1_ndep2");
				M_1_ws1 = values.at("M_1_ws1");
				M_1_ws2 = values.at("M_1_ws2");
				M_1_etp1 = values.at("M_1_etp1");
				M_1_etp2 = values.at("M_1_etp2");
				M_1_nw_w1 = values.at("M_1_nw_w1");
				M_1_nw_x_w2 = values.at("M_1_nw_x_w2");
				M_1_h1_x_w1 = values.at("M_1_h1_x_w1");
				M_1_h1_x_w2 = values.at("M_1_h1_x_w2");
				M_1_h2_x_w1 = values.at("M_1_h2_x_w1");
				M_1_h2_x_w2 = values.at("M_1_h2_x_w2");
				M_1_ci_x_w1 = values.at("M_1_ci_x_w1");
				M_1_ci_x_w2 = values.at("M_1_ci_x_w2");
				M_1_n1_x_w1 = values.at("M_1_n1_x_w1");
				M_1_n1_x_w2 = values.at("M_1_n1_x_w2");
				M_1_n2_x_w1 = values.at("M_1_n2_x_w1");
				M_1_n2_x_w2 = values.at("M_1_n2_x_w2");
				M_1_ne_e1 = values.at("M_1_ne_e1");
				M_1_ne_x_e2 = values.at("M_1_ne_x_e2");
				M_1_h1_x_e1 = values.at("M_1_h1_x_e1");
				M_1_h1_x_e2 = values.at("M_1_h1_x_e2");
				M_1_h2_x_e1 = values.at("M_1_h2_x_e1");
				M_1_h2_x_e2 = values.at("M_1_h2_x_e2");
				M_1_ci_x_e1 = values.at("M_1_ci_x_e1");
				M_1_ci_x_e2 = values.at("M_1_ci_x_e2");
				M_1_n1_x_e1 = values.at("M_1_n1_x_e1");
				M_1_n1_x_e2 = values.at("M_1_n1_x_e2");
				M_1_n2_x_e1 = values.at("M_1_n2_x_e1");
				M_1_n2_x_e2 = values.at("M_1_n2_x_e2");
				M_2_int = values.at("M_2_int");
				M_2_h1 = values.at("M_2_h1");
				M_2_h2 = values.at("M_2_h2");
				M_2_ci = values.at("M_2_ci");
				M_2_tmin1 = values.at("M_2_tmin1");
				M_2_tmin2 = values.at("M_2_tmin2");
				M_2_ndep1 = values.at("M_2_ndep1");
				M_2_ndep2 = values.at("M_2_ndep2");
				M_2_ws1 = values.at("M_2_ws1");
				M_2_ws2 = values.at("M_2_ws2");
				M_2_etp1 = values.at("M_2_etp1");
				M_2_etp2 = values.at("M_2_etp2");
				M_2_nw_w1 = values.at("M_2_nw_w1");
				M_2_nw_x_w2 = values.at("M_2_nw_x_w2");
				M_2_h1_x_w1 = values.at("M_2_h1_x_w1");
				M_2_h1_x_w2 = values.at("M_2_h1_x_w2");
				M_2_h2_x_w1 = values.at("M_2_h2_x_w1");
				M_2_h2_x_w2 = values.at("M_2_h2_x_w2");
				M_2_ci_x_w1 = values.at("M_2_ci_x_w1");
				M_2_ci_x_w2 = values.at("M_2_ci_x_w2");
				M_2_n1_x_w1 = values.at("M_2_n1_x_w1");
				M_2_n1_x_w2 = values.at("M_2_n1_x_w2");
				M_2_n2_x_w1 = values.at("M_2_n2_x_w1");
				M_2_n2_x_w2 = values.at("M_2_n2_x_w2");
				M_2_ne_e1 = values.at("M_2_ne_e1");
				M_2_ne_x_e2 = values.at("M_2_ne_x_e2");
				M_2_h1_x_e1 = values.at("M_2_h1_x_e1");
				M_2_h1_x_e2 = values.at("M_2_h1_x_e2");
				M_2_h2_x_e1 = values.at("M_2_h2_x_e1");
				M_2_h2_x_e2 = values.at("M_2_h2_x_e2");
				M_2_ci_x_e1 = values.at("M_2_ci_x_e1");
				M_2_ci_x_e2 = values.at("M_2_ci_x_e2");
				M_2_n1_x_e1 = values.at("M_2_n1_x_e1");
				M_2_n1_x_e2 = values.at("M_2_n1_x_e2");
				M_2_n2_x_e1 = values.at("M_2_n2_x_e1");
				M_2_n2_x_e2 = values.at("M_2_n2_x_e2");
				M_3_int = values.at("M_3_int");
				M_3_h1 = values.at("M_3_h1");
				M_3_h2 = values.at("M_3_h2");
				M_3_ci = values.at("M_3_ci");
				M_3_tmin1 = values.at("M_3_tmin1");
				M_3_tmin2 = values.at("M_3_tmin2");
				M_3_ndep1 = values.at("M_3_ndep1");
				M_3_ndep2 = values.at("M_3_ndep2");
				M_3_ws1 = values.at("M_3_ws1");
				M_3_ws2 = values.at("M_3_ws2");
				M_3_etp1 = values.at("M_3_etp1");
				M_3_etp2 = values.at("M_3_etp2");
				M_3_nw_w1 = values.at("M_3_nw_w1");
				M_3_nw_x_w2 = values.at("M_3_nw_x_w2");
				M_3_h1_x_w1 = values.at("M_3_h1_x_w1");
				M_3_h1_x_w2 = values.at("M_3_h1_x_w2");
				M_3_h2_x_w1 = values.at("M_3_h2_x_w1");
				M_3_h2_x_w2 = values.at("M_3_h2_x_w2");
				M_3_ci_x_w1 = values.at("M_3_ci_x_w1");
				M_3_ci_x_w2 = values.at("M_3_ci_x_w2");
				M_3_n1_x_w1 = values.at("M_3_n1_x_w1");
				M_3_n1_x_w2 = values.at("M_3_n1_x_w2");
				M_3_n2_x_w1 = values.at("M_3_n2_x_w1");
				M_3_n2_x_w2 = values.at("M_3_n2_x_w2");
				M_3_ne_e1 = values.at("M_3_ne_e1");
				M_3_ne_x_e2 = values.at("M_3_ne_x_e2");
				M_3_h1_x_e1 = values.at("M_3_h1_x_e1");
				M_3_h1_x_e2 = values.at("M_3_h1_x_e2");
				M_3_h2_x_e1 = values.at("M_3_h2_x_e1");
				M_3_h2_x_e2 = values.at("M_3_h2_x_e2");
				M_3_ci_x_e1 = values.at("M_3_ci_x_e1");
				M_3_ci_x_e2 = values.at("M_3_ci_x_e2");
				M_3_n1_x_e1 = values.at("M_3_n1_x_e1");
				M_3_n1_x_e2 = values.at("M_3_n1_x_e2");
				M_3_n2_x_e1 = values.at("M_3_n2_x_e1");
				M_3_n2_x_e2 = values.at("M_3_n2_x_e2");
				M_4_int = values.at("M_4_int");
				M_4_h1 = values.at("M_4_h1");
				M_4_h2 = values.at("M_4_h2");
				M_4_ci = values.at("M_4_ci");
				M_4_tmin1 = values.at("M_4_tmin1");
				M_4_tmin2 = values.at("M_4_tmin2");
				M_4_ndep1 = values.at("M_4_ndep1");
				M_4_ndep2 = values.at("M_4_ndep2");
				M_4_ws1 = values.at("M_4_ws1");
				M_4_ws2 = values.at("M_4_ws2");
				M_4_etp1 = values.at("M_4_etp1");
				M_4_etp2 = values.at("M_4_etp2");
				M_4_nw_w1 = values.at("M_4_nw_w1");
				M_4_nw_x_w2 = values.at("M_4_nw_x_w2");
				M_4_h1_x_w1 = values.at("M_4_h1_x_w1");
				M_4_h1_x_w2 = values.at("M_4_h1_x_w2");
				M_4_h2_x_w1 = values.at("M_4_h2_x_w1");
				M_4_h2_x_w2 = values.at("M_4_h2_x_w2");
				M_4_ci_x_w1 = values.at("M_4_ci_x_w1");
				M_4_ci_x_w2 = values.at("M_4_ci_x_w2");
				M_4_n1_x_w1 = values.at("M_4_n1_x_w1");
				M_4_n1_x_w2 = values.at("M_4_n1_x_w2");
				M_4_n2_x_w1 = values.at("M_4_n2_x_w1");
				M_4_n2_x_w2 = values.at("M_4_n2_x_w2");
				M_4_ne_e1 = values.at("M_4_ne_e1");
				M_4_ne_x_e2 = values.at("M_4_ne_x_e2");
				M_4_h1_x_e1 = values.at("M_4_h1_x_e1");
				M_4_h1_x_e2 = values.at("M_4_h1_x_e2");
				M_4_h2_x_e1 = values.at("M_4_h2_x_e1");
				M_4_h2_x_e2 = values.at("M_4_h2_x_e2");
				M_4_ci_x_e1 = values.at("M_4_ci_x_e1");
				M_4_ci_x_e2 = values.at("M_4_ci_x_e2");
				M_4_n1_x_e1 = values.at("M_4_n1_x_e1");
				M_4_n1_x_e2 = values.at("M_4_n1_x_e2");
				M_4_n2_x_e1 = values.at("M_4_n2_x_e1");
				M_4_n2_x_e2 = values.at("M_4_n2_x_e2");
				M_5_int = values.at("M_5_int");
				M_5_h1 = values.at("M_5_h1");
				M_5_h2 = values.at("M_5_h2");
				M_5_ci = values.at("M_5_ci");
				M_5_tmin1 = values.at("M_5_tmin1");
				M_5_tmin2 = values.at("M_5_tmin2");
				M_5_ndep1 = values.at("M_5_ndep1");
				M_5_ndep2 = values.at("M_5_ndep2");
				M_5_ws1 = values.at("M_5_ws1");
				M_5_ws2 = values.at("M_5_ws2");
				M_5_etp1 = values.at("M_5_etp1");
				M_5_etp2 = values.at("M_5_etp2");
				M_5_nw_w1 = values.at("M_5_nw_w1");
				M_5_nw_x_w2 = values.at("M_5_nw_x_w2");
				M_5_h1_x_w1 = values.at("M_5_h1_x_w1");
				M_5_h1_x_w2 = values.at("M_5_h1_x_w2");
				M_5_h2_x_w1 = values.at("M_5_h2_x_w1");
				M_5_h2_x_w2 = values.at("M_5_h2_x_w2");
				M_5_ci_x_w1 = values.at("M_5_ci_x_w1");
				M_5_ci_x_w2 = values.at("M_5_ci_x_w2");
				M_5_n1_x_w1 = values.at("M_5_n1_x_w1");
				M_5_n1_x_w2 = values.at("M_5_n1_x_w2");
				M_5_n2_x_w1 = values.at("M_5_n2_x_w1");
				M_5_n2_x_w2 = values.at("M_5_n2_x_w2");
				M_5_ne_e1 = values.at("M_5_ne_e1");
				M_5_ne_x_e2 = values.at("M_5_ne_x_e2");
				M_5_h1_x_e1 = values.at("M_5_h1_x_e1");
				M_5_h1_x_e2 = values.at("M_5_h1_x_e2");
				M_5_h2_x_e1 = values.at("M_5_h2_x_e1");
				M_5_h2_x_e2 = values.at("M_5_h2_x_e2");
				M_5_ci_x_e1 = values.at("M_5_ci_x_e1");
				M_5_ci_x_e2 = values.at("M_5_ci_x_e2");
				M_5_n1_x_e1 = values.at("M_5_n1_x_e1");
				M_5_n1_x_e2 = values.at("M_5_n1_x_e2");
				M_5_n2_x_e1 = values.at("M_5_n2_x_e1");
				M_5_n2_x_e2 = values.at("M_5_n2_x_e2");
				M_h1_mu = values.at("M_h1_mu");
				M_h2_mu = values.at("M_h2_mu");
				M_ci_mu = values.at("M_ci_mu");
				M_tmin1_mu = values.at("M_tmin1_mu");
				M_tmin2_mu = values.at("M_tmin2_mu");
				M_n1_mu = values.at("M_n1_mu");
				M_n2_mu = values.at("M_n2_mu");
				M_ws1_mu = values.at("M_ws1_mu");
				M_ws2_mu = values.at("M_ws2_mu");
				M_etp1_mu = values.at("M_etp1_mu");
				M_etp2_mu = values.at("M_etp2_mu");
				M_nw_mu = values.at("M_nw_mu");
				M_ne_mu = values.at("M_ne_mu");
				M_h1_sig = values.at("M_h1_sig");
				M_h2_sig = values.at("M_h2_sig");
				M_ci_sig = values.at("M_ci_sig");
				M_tmin1_sig = values.at("M_tmin1_sig");
				M_tmin2_sig = values.at("M_tmin2_sig");
				M_n1_sig = values.at("M_n1_sig");
				M_n2_sig = values.at("M_n2_sig");
				M_ws1_sig = values.at("M_ws1_sig");
				M_ws2_sig = values.at("M_ws2_sig");
				M_etp1_sig = values.at("M_etp1_sig");
				M_etp2_sig = values.at("M_etp2_sig");
				M_nw_sig = values.at("M_nw_sig");
				M_ne_sig = values.at("M_ne_sig");

			}
		};
	}
}

#endif
