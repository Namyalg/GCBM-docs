#ifndef sawtooth_es3_parameter_h
#define sawtooth_es3_parameter_h
#include <map>
namespace Sawtooth {
	namespace Parameter {
		struct ParameterGrowthES3 {
			double Int;
			double LnB;
			double B;
			double AS;
			double BLS;
			double BS;
			double SL1;
			double SL2;
			double CASL;
			double TWI;
			double DAI;
			double DAP;
			double Tc;
			double T;
			double E;
			double W1;
			double W2;
			double W3;
			double N;
			double C;
			double BLSxSL;
			double BLSxCASL;
			double BLSxTWI;
			double BLSxDAI;
			double BLSxDAP;
			double BLSxT;
			double BLSxE;
			double BLSxW;
			double BLSxN;
			double BLSxC;
			double SLxDAI;
			double SLxDAP;
			double CASLxDAI;
			double CASLxDAP;
			double TWIxDAI;
			double TWIxDAP;
			double SLxT;
			double SLxE;
			double SLxW;
			double SLxN;
			double SLxC;
			double CASLxT;
			double CASLxE;
			double CASLxW;
			double CASLxN;
			double CASLxC;
			double TWIxT;
			double TWIxE;
			double TWIxW;
			double TWIxN;
			double TWIxC;
			double DAIxT;
			double DAIxE;
			double DAIxW;
			double DAIxN;
			double DAIxC;
			double DAPxT;
			double DAPxE;
			double DAPxW;
			double DAPxN;
			double DAPxC;
			double TxE;
			double TxW;
			double NxT;
			double NxT2;
			double NxE;
			double NxE2;
			double NxW;
			double NxW2;
			double CxT;
			double CxT2;
			double CxE;
			double CxE2;
			double CxW;
			double CxW2;
			double CxN;
			double CxN2;
			double BLSxSLxDAI;
			double BLSxCASLxDAI;
			double BLSxTWIxDAI;
			double BLSxSLxDAP;
			double BLSxCASLxDAP;
			double BLSxTWIxDAP;
			double BLSxSLxT;
			double BLSxCASLxT;
			double BLSxTWIxT;
			double BLSxSLxE;
			double BLSxCASLxE;
			double BLSxTWIxE;
			double BLSxSLxW;
			double BLSxCASLxW;
			double BLSxTWIxW;
			double BLSxSLxN;
			double BLSxCASLxN;
			double BLSxTWIxN;
			double BLSxSLxC;
			double BLSxCASLxC;
			double BLSxTWIxC;
			double SLxDAIxT;
			double SLxDAPxT;
			double CASLxDAIxT;
			double CASLxDAPxT;
			double TWIxDAIxT;
			double TWIxDAPxT;
			double SLxDAIxE;
			double SLxDAPxE;
			double CASLxDAIxE;
			double CASLxDAPxE;
			double TWIxDAIxE;
			double TWIxDAPxE;
			double SLxDAIxW;
			double SLxDAPxW;
			double CASLxDAIxW;
			double CASLxDAPxW;
			double TWIxDAIxW;
			double TWIxDAPxW;
			double SLxDAIxN;
			double SLxDAPxN;
			double CASLxDAIxN;
			double CASLxDAPxN;
			double TWIxDAIxN;
			double TWIxDAPxN;
			double SLxDAIxC;
			double SLxDAPxC;
			double CASLxDAIxC;
			double CASLxDAPxC;
			double TWIxDAIxC;
			double TWIxDAPxC;
			double BLSxSLxDAIxT;
			double BLSxCASLxDAIxT;
			double BLSxTWIxDAIxT;
			double BLSxSLxDAPxT;
			double BLSxCASLxDAPxT;
			double BLSxTWIxDAPxT;
			double BLSxSLxDAIxE;
			double BLSxCASLxDAIxE;
			double BLSxTWIxDAIxE;
			double BLSxSLxDAPxE;
			double BLSxCASLxDAPxE;
			double BLSxTWIxDAPxE;
			double BLSxSLxDAIxW;
			double BLSxCASLxDAIxW;
			double BLSxTWIxDAIxW;
			double BLSxSLxDAPxW;
			double BLSxCASLxDAPxW;
			double BLSxTWIxDAPxW;
			double BLSxSLxDAIxN;
			double BLSxCASLxDAIxN;
			double BLSxTWIxDAIxN;
			double BLSxSLxDAPxN;
			double BLSxCASLxDAPxN;
			double BLSxTWIxDAPxN;
			double BLSxSLxDAIxC;
			double BLSxCASLxDAIxC;
			double BLSxTWIxDAIxC;
			double BLSxSLxDAPxC;
			double BLSxCASLxDAPxC;
			double BLSxTWIxDAPxC;
			double LnB_mu;
			double B_mu;
			double AS_mu;
			double BLS_mu;
			double BS_mu;
			double SL1_mu;
			double SL2_mu;
			double CASL_mu;
			double TWI_mu;
			double DAI_mu;
			double DAP_mu;
			double Tc_mu;
			double T_mu;
			double E_mu;
			double W1_mu;
			double W2_mu;
			double W3_mu;
			double N_mu;
			double C_mu;
			double LnB_sig;
			double B_sig;
			double AS_sig;
			double BLS_sig;
			double BS_sig;
			double SL1_sig;
			double SL2_sig;
			double CASL_sig;
			double TWI_sig;
			double DAI_sig;
			double DAP_sig;
			double Tc_sig;
			double T_sig;
			double E_sig;
			double W1_sig;
			double W2_sig;
			double W3_sig;
			double N_sig;
			double C_sig;
			double LogCorrection;

			ParameterGrowthES3() {}

			ParameterGrowthES3(const EquationSet& values)
			{
				Int = values.at("Int");
				LnB = values.at("LnB");
				B = values.at("B");
				AS = values.at("AS");
				BLS = values.at("BLS");
				BS = values.at("BS");
				SL1 = values.at("SL1");
				SL2 = values.at("SL2");
				CASL = values.at("CASL");
				TWI = values.at("TWI");
				DAI = values.at("DAI");
				DAP = values.at("DAP");
				Tc = values.at("Tc");
				T = values.at("T");
				E = values.at("E");
				W1 = values.at("W1");
				W2 = values.at("W2");
				W3 = values.at("W3");
				N = values.at("N");
				C = values.at("C");
				BLSxSL = values.at("BLSxSL");
				BLSxCASL = values.at("BLSxCASL");
				BLSxTWI = values.at("BLSxTWI");
				BLSxDAI = values.at("BLSxDAI");
				BLSxDAP = values.at("BLSxDAP");
				BLSxT = values.at("BLSxT");
				BLSxE = values.at("BLSxE");
				BLSxW = values.at("BLSxW");
				BLSxN = values.at("BLSxN");
				BLSxC = values.at("BLSxC");
				SLxDAI = values.at("SLxDAI");
				SLxDAP = values.at("SLxDAP");
				CASLxDAI = values.at("CASLxDAI");
				CASLxDAP = values.at("CASLxDAP");
				TWIxDAI = values.at("TWIxDAI");
				TWIxDAP = values.at("TWIxDAP");
				SLxT = values.at("SLxT");
				SLxE = values.at("SLxE");
				SLxW = values.at("SLxW");
				SLxN = values.at("SLxN");
				SLxC = values.at("SLxC");
				CASLxT = values.at("CASLxT");
				CASLxE = values.at("CASLxE");
				CASLxW = values.at("CASLxW");
				CASLxN = values.at("CASLxN");
				CASLxC = values.at("CASLxC");
				TWIxT = values.at("TWIxT");
				TWIxE = values.at("TWIxE");
				TWIxW = values.at("TWIxW");
				TWIxN = values.at("TWIxN");
				TWIxC = values.at("TWIxC");
				DAIxT = values.at("DAIxT");
				DAIxE = values.at("DAIxE");
				DAIxW = values.at("DAIxW");
				DAIxN = values.at("DAIxN");
				DAIxC = values.at("DAIxC");
				DAPxT = values.at("DAPxT");
				DAPxE = values.at("DAPxE");
				DAPxW = values.at("DAPxW");
				DAPxN = values.at("DAPxN");
				DAPxC = values.at("DAPxC");
				TxE = values.at("TxE");
				TxW = values.at("TxW");
				NxT = values.at("NxT");
				NxT2 = values.at("NxT2");
				NxE = values.at("NxE");
				NxE2 = values.at("NxE2");
				NxW = values.at("NxW");
				NxW2 = values.at("NxW2");
				CxT = values.at("CxT");
				CxT2 = values.at("CxT2");
				CxE = values.at("CxE");
				CxE2 = values.at("CxE2");
				CxW = values.at("CxW");
				CxW2 = values.at("CxW2");
				CxN = values.at("CxN");
				CxN2 = values.at("CxN2");
				BLSxSLxDAI = values.at("BLSxSLxDAI");
				BLSxCASLxDAI = values.at("BLSxCASLxDAI");
				BLSxTWIxDAI = values.at("BLSxTWIxDAI");
				BLSxSLxDAP = values.at("BLSxSLxDAP");
				BLSxCASLxDAP = values.at("BLSxCASLxDAP");
				BLSxTWIxDAP = values.at("BLSxTWIxDAP");
				BLSxSLxT = values.at("BLSxSLxT");
				BLSxCASLxT = values.at("BLSxCASLxT");
				BLSxTWIxT = values.at("BLSxTWIxT");
				BLSxSLxE = values.at("BLSxSLxE");
				BLSxCASLxE = values.at("BLSxCASLxE");
				BLSxTWIxE = values.at("BLSxTWIxE");
				BLSxSLxW = values.at("BLSxSLxW");
				BLSxCASLxW = values.at("BLSxCASLxW");
				BLSxTWIxW = values.at("BLSxTWIxW");
				BLSxSLxN = values.at("BLSxSLxN");
				BLSxCASLxN = values.at("BLSxCASLxN");
				BLSxTWIxN = values.at("BLSxTWIxN");
				BLSxSLxC = values.at("BLSxSLxC");
				BLSxCASLxC = values.at("BLSxCASLxC");
				BLSxTWIxC = values.at("BLSxTWIxC");
				SLxDAIxT = values.at("SLxDAIxT");
				SLxDAPxT = values.at("SLxDAPxT");
				CASLxDAIxT = values.at("CASLxDAIxT");
				CASLxDAPxT = values.at("CASLxDAPxT");
				TWIxDAIxT = values.at("TWIxDAIxT");
				TWIxDAPxT = values.at("TWIxDAPxT");
				SLxDAIxE = values.at("SLxDAIxE");
				SLxDAPxE = values.at("SLxDAPxE");
				CASLxDAIxE = values.at("CASLxDAIxE");
				CASLxDAPxE = values.at("CASLxDAPxE");
				TWIxDAIxE = values.at("TWIxDAIxE");
				TWIxDAPxE = values.at("TWIxDAPxE");
				SLxDAIxW = values.at("SLxDAIxW");
				SLxDAPxW = values.at("SLxDAPxW");
				CASLxDAIxW = values.at("CASLxDAIxW");
				CASLxDAPxW = values.at("CASLxDAPxW");
				TWIxDAIxW = values.at("TWIxDAIxW");
				TWIxDAPxW = values.at("TWIxDAPxW");
				SLxDAIxN = values.at("SLxDAIxN");
				SLxDAPxN = values.at("SLxDAPxN");
				CASLxDAIxN = values.at("CASLxDAIxN");
				CASLxDAPxN = values.at("CASLxDAPxN");
				TWIxDAIxN = values.at("TWIxDAIxN");
				TWIxDAPxN = values.at("TWIxDAPxN");
				SLxDAIxC = values.at("SLxDAIxC");
				SLxDAPxC = values.at("SLxDAPxC");
				CASLxDAIxC = values.at("CASLxDAIxC");
				CASLxDAPxC = values.at("CASLxDAPxC");
				TWIxDAIxC = values.at("TWIxDAIxC");
				TWIxDAPxC = values.at("TWIxDAPxC");
				BLSxSLxDAIxT = values.at("BLSxSLxDAIxT");
				BLSxCASLxDAIxT = values.at("BLSxCASLxDAIxT");
				BLSxTWIxDAIxT = values.at("BLSxTWIxDAIxT");
				BLSxSLxDAPxT = values.at("BLSxSLxDAPxT");
				BLSxCASLxDAPxT = values.at("BLSxCASLxDAPxT");
				BLSxTWIxDAPxT = values.at("BLSxTWIxDAPxT");
				BLSxSLxDAIxE = values.at("BLSxSLxDAIxE");
				BLSxCASLxDAIxE = values.at("BLSxCASLxDAIxE");
				BLSxTWIxDAIxE = values.at("BLSxTWIxDAIxE");
				BLSxSLxDAPxE = values.at("BLSxSLxDAPxE");
				BLSxCASLxDAPxE = values.at("BLSxCASLxDAPxE");
				BLSxTWIxDAPxE = values.at("BLSxTWIxDAPxE");
				BLSxSLxDAIxW = values.at("BLSxSLxDAIxW");
				BLSxCASLxDAIxW = values.at("BLSxCASLxDAIxW");
				BLSxTWIxDAIxW = values.at("BLSxTWIxDAIxW");
				BLSxSLxDAPxW = values.at("BLSxSLxDAPxW");
				BLSxCASLxDAPxW = values.at("BLSxCASLxDAPxW");
				BLSxTWIxDAPxW = values.at("BLSxTWIxDAPxW");
				BLSxSLxDAIxN = values.at("BLSxSLxDAIxN");
				BLSxCASLxDAIxN = values.at("BLSxCASLxDAIxN");
				BLSxTWIxDAIxN = values.at("BLSxTWIxDAIxN");
				BLSxSLxDAPxN = values.at("BLSxSLxDAPxN");
				BLSxCASLxDAPxN = values.at("BLSxCASLxDAPxN");
				BLSxTWIxDAPxN = values.at("BLSxTWIxDAPxN");
				BLSxSLxDAIxC = values.at("BLSxSLxDAIxC");
				BLSxCASLxDAIxC = values.at("BLSxCASLxDAIxC");
				BLSxTWIxDAIxC = values.at("BLSxTWIxDAIxC");
				BLSxSLxDAPxC = values.at("BLSxSLxDAPxC");
				BLSxCASLxDAPxC = values.at("BLSxCASLxDAPxC");
				BLSxTWIxDAPxC = values.at("BLSxTWIxDAPxC");
				LnB_mu = values.at("LnB_mu");
				B_mu = values.at("B_mu");
				AS_mu = values.at("AS_mu");
				BLS_mu = values.at("BLS_mu");
				BS_mu = values.at("BS_mu");
				SL1_mu = values.at("SL1_mu");
				SL2_mu = values.at("SL2_mu");
				CASL_mu = values.at("CASL_mu");
				TWI_mu = values.at("TWI_mu");
				DAI_mu = values.at("DAI_mu");
				DAP_mu = values.at("DAP_mu");
				Tc_mu = values.at("Tc_mu");
				T_mu = values.at("T_mu");
				E_mu = values.at("E_mu");
				W1_mu = values.at("W1_mu");
				W2_mu = values.at("W2_mu");
				W3_mu = values.at("W3_mu");
				N_mu = values.at("N_mu");
				C_mu = values.at("C_mu");
				LnB_sig = values.at("LnB_sig");
				B_sig = values.at("B_sig");
				AS_sig = values.at("AS_sig");
				BLS_sig = values.at("BLS_sig");
				BS_sig = values.at("BS_sig");
				SL1_sig = values.at("SL1_sig");
				SL2_sig = values.at("SL2_sig");
				CASL_sig = values.at("CASL_sig");
				TWI_sig = values.at("TWI_sig");
				DAI_sig = values.at("DAI_sig");
				DAP_sig = values.at("DAP_sig");
				Tc_sig = values.at("Tc_sig");
				T_sig = values.at("T_sig");
				E_sig = values.at("E_sig");
				W1_sig = values.at("W1_sig");
				W2_sig = values.at("W2_sig");
				W3_sig = values.at("W3_sig");
				N_sig = values.at("N_sig");
				C_sig = values.at("C_sig");
				LogCorrection = values.at("LogCorrection");

			}
		};
	}
}

#endif
